http://www.codeskulptor.org/#user43_9AeffsNX3E_55.py

"""
Monte Carlo Tic-Tac-Toe Player
"""

import random
import poc_ttt_gui
import poc_ttt_provided as provided

# Constants for Monte Carlo simulator
# You may change the values of these constants as desired, but
#  do not change their names.
NTRIALS = 20	       # Number of trials to run
SCORE_CURRENT = 1.0 # Score for squares played by the current player
SCORE_OTHER = 1.0   # Score for squares played by the other player


def mc_trial(board,player):
    """
This function takes a current board and the next player to move. 
The function should play a game starting with the given player by 
making random moves, alternating between players. The function should 
return when the game is over. The modified board will contain the 
state of the game, so the function does not return anything. 
In other words, the function should modify the board input.
    """
    empty_tiles=board.get_empty_squares()
    if(board.check_win()==None):
        random_tile=random.choice(empty_tiles)
        board.move(random_tile[0],random_tile[1],player)
        player=provided.switch_player(player)
        mc_trial(board,player)
        
def mc_update_scores(scores, board, player): 
    """
This function takes a grid of scores (a list of lists) with the 
same dimensions as the Tic-Tac-Toe board, a board from a completed 
game, and which player the machine player is. The function should 
score the completed board and update the scores grid. As the function 
updates the scores grid directly, it does not return anything,
    """
    winner=board.check_win()
    dimension=board.get_dim()
    mc_match=0
    mc_other=0
    
    if(winner==player):
        mc_match=SCORE_CURRENT
        mc_other=-SCORE_OTHER
    elif(winner==provided.switch_player(player)):
        mc_match=-SCORE_CURRENT
        mc_other=SCORE_OTHER
    
    for row in range(dimension):
        for col in range(dimension):
            if((board.square(row,col)==player)):
                scores[row][col]+=mc_match
            elif((board.square(row,col)==provided.switch_player(player))):
                scores[row][col]+=mc_other

def get_best_move(board, scores): 
    """
This function takes a current board and a grid of scores. 
The function should find all of the empty squares with the maximum 
score and randomly return one of them as a (row, column) tuple. 
It is an error to call this function with a board that has no empty 
squares (there is no possible next move), so your function may do 
whatever it wants in that case. The case where the board is full will 
not be tested.
    """
    empty_tiles=board.get_empty_squares()
    dimension=board.get_dim()
    max_score=-float("inf")
    max_list=[]
    
    if(len(empty_tiles)==0):
        print("No more empty tiles left")
    else:            
        for row in range(dimension):
            for col in range(dimension):
                if(scores[row][col]>max_score and (row,col) in empty_tiles):
                    max_score=scores[row][col]
                    max_list=[row,col]
        max_tuple=(max_list[0],max_list[1])
    return max_tuple   

def mc_move(board,player,trials):
    """
This function takes a current board, which player the 
machine player is, and the number of trials to run. 
The function should use the Monte Carlo simulation 
described above to return a move for the machine player 
in the form of a (row, column) tuple. Be sure to use the 
other functions you have written!
    """
    dimension=board.get_dim()
    scores=[[0 for _ in range(dimension)] 
            for _ in range(dimension)]
    
    for _ in range(trials):
        clone_board=board.clone()
        mc_trial(clone_board,player)
        mc_update_scores(scores, clone_board, player)
    
    return get_best_move(board,scores)
    #(row_best_move,col_best_move)=get_best_move(board,scores)
    #board.move(row_best_move,col_best_move,player)
    #print board.__str__()

# Test game with the console or the GUI.  Uncomment whichever 
# you prefer.  Both should be commented out when you submit 
# for testing to save time.

provided.play_game(mc_move, NTRIALS, False)        
poc_ttt_gui.run_gui(3, provided.PLAYERX, mc_move, NTRIALS, False)

